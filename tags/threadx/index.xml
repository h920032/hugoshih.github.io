<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ThreadX on Hsing-Yu Shih</title><link>https://www.hugoshih.com/tags/threadx/</link><description>Recent content in ThreadX on Hsing-Yu Shih</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 06 Jan 2025 15:32:31 +0800</lastBuildDate><atom:link href="https://www.hugoshih.com/tags/threadx/index.xml" rel="self" type="application/rss+xml"/><item><title>常見 Real-Time OS 介紹與比較</title><link>https://www.hugoshih.com/p/%E5%B8%B8%E8%A6%8B-real-time-os-%E4%BB%8B%E7%B4%B9%E8%88%87%E6%AF%94%E8%BC%83/</link><pubDate>Mon, 06 Jan 2025 15:32:31 +0800</pubDate><guid>https://www.hugoshih.com/p/%E5%B8%B8%E8%A6%8B-real-time-os-%E4%BB%8B%E7%B4%B9%E8%88%87%E6%AF%94%E8%BC%83/</guid><description>&lt;img src="https://i.imgur.com/7SJYZ3b.jpg" alt="Featured image of post 常見 Real-Time OS 介紹與比較" />&lt;h2 id="介紹">介紹
&lt;/h2>&lt;p>即時作業系統（Real-Time Operating System, RTOS）是一種專門為即時（real-time）應用而設計的作業系統，強調「在特定時間限制內（deadline）對事件進行回應」，試想一個情境在工業的領域若機器某部分突然產生故障，需要在極短的時間內停止所有馬達的運作，若此時使用的是傳統的作業系統如Linux，依OS內核的調度策略，最終馬達停止的動作會有些許延遲，相較之下RTOS則可以有較彈性的執行緒搶佔，讓緊急情況的處理可以更快被執行&lt;/p>
&lt;p>本質上來說RTOS的內核使用起來的效果是大同小異的，基本上能做到多個執行緒的建立、輪詢執行、優先序搶佔、互斥鎖、內核級的中斷等功能，進階一點的則有可以動態記憶體管理、多核心的支援，這些RTOS主要的差異大多是在外圍模組的支援、周邊的開發生態系等，以下就分別介紹目前主流常見的幾種RTOS:&lt;/p>
&lt;h3 id="freertoshttpsgithubcomfreertosfreertos">&lt;a class="link" href="https://github.com/FreeRTOS/FreeRTOS" target="_blank" rel="noopener"
>FreeRTOS&lt;/a>
&lt;/h3>&lt;p>FreeRTOS 是由 Real Time Engineers Ltd. 及 Amazon 維護，完全開源並且在全球廣受使用，FreeRTOS 可以說是最最最常見的一種RTOS，成功之道大概在於早早就開源，早早就被各家IDE整合，各家晶片的SDK也都可以看到他的影子，我最早接觸他是在Arduino IDE，FreeRTOS早早就出現在Arduino library list中，使用起來也夠簡單，沒有什麼複雜的設定，加一兩行code就可以實現多執行緒，讓初學者很容易就可以踏入RTOS的世界。他背後的金主爸爸是 Amazon，後來也整合了不少 AWS 上IoT相關的功能，由於早早就開源，周圍的模組也不少。&lt;/p>
&lt;h3 id="azurertos-threadxhttpsgithubcomeclipse-threadxthreadx">&lt;a class="link" href="https://github.com/eclipse-threadx/threadx" target="_blank" rel="noopener"
>AzureRTOS (Threadx)&lt;/a>
&lt;/h3>&lt;p>ThreadX 是由 Express Logic 開發的即時作業系統（RTOS），後續被 Microsoft 收購並推出更名版本 AzureRTOS 並開源，從名字就可以看出來未來應該是要跟微軟的 Azure 搭配做一些IoT的功能，但目前好像還沒看到什麼殺手級的應用。由於開源的時間比較晚，周圍的套件比較少，像BLE、Wifi這類的Stack能用的東西好像比較少，但相信有微軟原生的支援應該可以成長的很快，我會碰到 AzureRTOS 是因為 STM32 官方原生支援 AzureRTOS，很有趣的是 STM32 的開發環境也有支援 FreeRTOS，但支援度是遠遜於 AzureRTOS 的。&lt;/p>
&lt;h3 id="zephyrhttpsgithubcomzephyrproject-rtoszephyr">&lt;a class="link" href="https://github.com/zephyrproject-rtos/zephyr" target="_blank" rel="noopener"
>Zephyr&lt;/a>
&lt;/h3>&lt;p>Zephyr 是由 Linux 基金會（Linux Foundation）主導的開源即時作業系統（RTOS），Zephyr雖然出現很久了，但算是這幾年才突然紅起來，主打一個跨平台的相容性和完整的開發工具鏈，有像是West這種很好用的工具、也有像是DeviceTree者種為跨平台設計的架構，可以說要用Zephyr就要連著這一整串工具鏈一起用才會好用，不過好像也是因為綁著工具鏈跟相容性的原因，好像各家晶片雖然說有支援，但好像又支援的沒那麼好，特別是牽涉到很底層的硬體設定(像時鐘樹設定)就會變的特別麻煩，如果沒有這種需求就蠻好用的，很多設定、初始化都幫你省略了。會碰到Zephyr是因為使用 Nordic 的藍牙 SoC，最新的的 nrf connect SDK 基本上是建立在 Zephyr 上的，而 Zephyr 通訊相關的套件也很完整，很適合給 Nordic 的晶片用。&lt;/p>
&lt;h3 id="rt-threadhttpsgithubcomrt-threadrt-thread">&lt;a class="link" href="https://github.com/RT-Thread/rt-thread" target="_blank" rel="noopener"
>RT-Thread&lt;/a>
&lt;/h3>&lt;p>RT-Thread 是一款由中國團隊主導開發的開源即時作業系統（RTOS），在中國的嵌入式系統開源社群算蠻熱門的，對中國製MCU(特別是一些RISC-V的晶片)支援度很好，但其他地方就比較少看到有人在用，跟Zephyr一樣也有蠻多工具可以使用，我自己還沒有用過，但讓我印象深刻的是RT-Thread社群有一個可以一鍵生成 STM32 bootloader 的工具，不過要使用要註冊帳號，而且還限定用中國的電話才能註冊&amp;hellip;，就對中國以外的開發者不是很友好。&lt;/p>
&lt;h2 id="比較">比較
&lt;/h2>&lt;h3 id="幾種rtos的差別">幾種RTOS的差別
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>名稱&lt;/strong>&lt;/th>
&lt;th>&lt;strong>AzureRTOS (ThreadX)&lt;/strong>&lt;/th>
&lt;th>&lt;strong>FreeRTOS&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Zephyr&lt;/strong>&lt;/th>
&lt;th>&lt;strong>RT-Thread&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>維護者&lt;/strong>&lt;/td>
&lt;td>- 原為 Express Logic 開發，現由 Azure (Microsoft) 管理 &lt;br/> - 被微軟購買後開源&lt;/td>
&lt;td>- AWS（Amazon）及大社群共同維護 &lt;br/> - 開源專案，有廣大社群支援&lt;/td>
&lt;td>- 由 Linux Foundation 托管 &lt;br/> - 眾多主要產業贊助商與貢獻者（如 Intel、Nordic 等）&lt;/td>
&lt;td>- 中國嵌入式廠商與RT-Thread 社群&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>授權&lt;/strong>&lt;/td>
&lt;td>- MIT 授權 (開源版本)&lt;/td>
&lt;td>- MIT 授權 &lt;br/> - 完全開源、商業可使用&lt;/td>
&lt;td>- Apache 2.0 授權 &lt;br/> - 完全開源&lt;/td>
&lt;td>- LGPL 授權 &lt;br/> - 可商業使用，但需遵守 LGPL 條款&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>主要特色&lt;/strong>&lt;/td>
&lt;td>- 小巧的記憶體佔用 &lt;br/> - 高效能可搶先式多工 &lt;br/> - 整合除錯功能、其他外設控制模組&lt;/td>
&lt;td>- 模組化設計，可高度客製化內核 &lt;br/> - 協同式及可搶先式多工 &lt;br/> - 詳細文件與巨大社群，支援度高&lt;/td>
&lt;td>- 跨平台相容性好 &lt;br/> - 追蹤與分析工具完善 &lt;br/> - 與 Percepio Tracealyzer 整合&lt;/td>
&lt;td>- 輕量化設計與微核心架構 &lt;br/> - 效率高，啟動速度快 &lt;br/> - 著重模組化與易用性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>使用門檻&lt;/strong>&lt;/td>
&lt;td>- 門檻中 &lt;br/> - 提供專門的 API 與工具鏈 &lt;br/> - 原生支援STM32，其他晶片支援則較少&lt;/td>
&lt;td>- 門檻低 &lt;br/> - 文件全面且社群龐大 &lt;br/> - 新手上手相對容易，維護成本低&lt;/td>
&lt;td>- 門檻高 &lt;br/> - 須熟悉成套的開發工具鏈 &lt;br/> - 社群與企業資源豐富，難度取決於應用深度&lt;/td>
&lt;td>- 門檻中 &lt;br/> - 設計較為精簡易懂 &lt;br/> - 模組化讓功能可彈性擴充，但仍需對 RTOS 原理有基礎理解&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>社群與生態&lt;/strong>&lt;/td>
&lt;td>- 因 Microsoft Azure 加持，工業界支持度高 &lt;br/> - 開源時間較晚，社群支援相較少&lt;/td>
&lt;td>- 擁有極為廣泛的使用者社群 &lt;br/> - 豐富的第三方套件與論壇資源&lt;/td>
&lt;td>- 企業和開源社群雙管齊下 &lt;br/> - 大型廠商投入資源開發並提供硬體支援 &lt;br/> - 文件與套件工具逐漸成熟&lt;/td>
&lt;td>- 亞洲市場擁有極大用戶基礎 &lt;br/> - 社群不斷壯大，第三方資源也逐年提升&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>適用範圍&lt;/strong>&lt;/td>
&lt;td>- 消費電子、工業設備 &lt;br/> - 高度資源受限或需要高效能的應用&lt;/td>
&lt;td>- 廣泛用於各類微控制器與嵌入式裝置 &lt;br/> - 適合中小型專案或原型開發&lt;/td>
&lt;td>- 高度跨平台相容性的產品 &lt;br/> - 需要整合多種通訊協定的裝置&lt;/td>
&lt;td>- 小型物聯網裝置、家電產品、工業控制等 &lt;br/> - 適合資源有限且需高即時性的情境&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>範例&lt;/strong>&lt;/td>
&lt;td>- 高度整合 SoC 平台 &lt;br/> - 網路裝置、醫療器械、消費性電子設備 &lt;br/> - 資源特別有限但需穩定度的系統&lt;/td>
&lt;td>- 物聯網邊緣設備 &lt;br/> - 小型感測器、可攜式產品 &lt;br/> - 工業自動化控制&lt;/td>
&lt;td>- 高速通訊設備 &lt;br/> - 需要完整追蹤與調試能力的工業設備 &lt;br/> - 精密儀器及高可靠度應用&lt;/td>
&lt;td>- 嵌入式微控制器 &lt;br/> - 智能家居與可穿戴式裝置 &lt;br/> - 需要快速啟動、高效率排程的場景&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="內核功能層面的差異">內核功能層面的差異
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>名稱&lt;/strong>&lt;/th>
&lt;th>&lt;strong>AzureRTOS (ThreadX)&lt;/strong>&lt;/th>
&lt;th>&lt;strong>FreeRTOS&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Zephyr&lt;/strong>&lt;/th>
&lt;th>&lt;strong>RT-Thread&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>內核架構&lt;/strong>&lt;/td>
&lt;td>- 輕量級、模組化設計 &lt;br/> - 單核心即時系統 &lt;br/> - 提供 preemption-threshold&lt;/td>
&lt;td>- 單核心設計 &lt;br/> - 透過設定檔自由啟用/停用功能 &lt;br/> - 針對 MCU 移植方便&lt;/td>
&lt;td>- 類微核心（microkernel）概念 &lt;br/> - Kconfig 編譯時可裁剪/擴充 &lt;br/> - 可支援多核心 (SMP)&lt;/td>
&lt;td>- 微核心 + 模組化 &lt;br/> - 通過 Packages 擴充 &lt;br/> - 預設核心輕量、啟動速度快&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>排程機制&lt;/strong>&lt;/td>
&lt;td>- 可搶先式多工 &lt;br/> - 優先順序排程 &lt;br/> - preemption-threshold 降低不必要的搶先&lt;/td>
&lt;td>- 可搶先式或協同式多工 &lt;br/> - 時間片 (time slicing) 可選 &lt;br/> - 任務通知提高效能&lt;/td>
&lt;td>- 可搶先式/協同式混合 &lt;br/> - 支援多核心下的任務搬移 &lt;br/> - 彈性設定時間片與搶先策略&lt;/td>
&lt;td>- 以優先順序為基礎的可搶先式 &lt;br/> - 切換開銷低 &lt;br/> - 適合時限嚴苛的應用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>中斷管理&lt;/strong>&lt;/td>
&lt;td>- 提供快速中斷響應 &lt;br/> - ISR 中可使用 IPC 原語 &lt;br/> - 建議複雜邏輯放在 Thread&lt;/td>
&lt;td>- 有完整的中斷優先級設定規範 &lt;br/> - 提供「FromISR」API 與核心互動 &lt;br/> - 避免高優先級中斷封鎖 RTOS 服務&lt;/td>
&lt;td>- 針對不同架構有對應方法 &lt;br/> - 允許在 ISR 後半段做較複雜處理 &lt;br/> - 支援 &lt;code>irq_offload&lt;/code>&lt;/td>
&lt;td>- 中斷入口/出口簡潔 &lt;br/> - 可在 ISR 裡做任務喚醒或 IPC &lt;br/> - 建議將重任務放在中斷後處理或 Task&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>任務通訊與同步&lt;/strong>&lt;/td>
&lt;td>- 提供 Semaphore、Mutex、Event Flags、Message Queue &lt;br/> - Block Pool / Byte Pool 作為底層資源&lt;/td>
&lt;td>- 有 Queue、Semaphore、Mutex、Event Group、Task Notification &lt;br/> - Queue 是核心溝通管道&lt;/td>
&lt;td>- 提供 Queue、FIFO、LIFO、Pipe、Mailbox、Semaphore、Mutex 等多樣化機制 &lt;br/> - 信號（Signals）/事件等高階通訊&lt;/td>
&lt;td>- 提供 Semaphore、Mutex、Event、Mailbox、Message Queue &lt;br/> - 模組化 API，易於擴充&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>記憶體管理&lt;/strong>&lt;/td>
&lt;td>- Block Pool（固定大小） &lt;br/> - Byte Pool（彈性分配） &lt;br/> - 適合小型系統&lt;/td>
&lt;td>- 多種 heap 實作 (heap1~heap5) &lt;br/> - 依需求選擇靜態或動態配置 &lt;br/> - 須注意配置 Semaphore / Mutex 以確保多任務安全&lt;/td>
&lt;td>- slab、mempool、heap 等多種分配策略 &lt;br/> - Kconfig 可細調 &lt;br/> - 需在編譯階段做良好配置&lt;/td>
&lt;td>- mempool、heap 二分法 &lt;br/> - 預設輕量動態分配算法 &lt;br/> - 可搭配自訂或高階 alloc 演算法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>除錯與追蹤&lt;/strong>&lt;/td>
&lt;td>- 可使用 TraceX 等工具 &lt;br/> - 整合度高，針對 Thread、Event、IPC 做可視化&lt;/td>
&lt;td>- FreeRTOS+Trace、第三方 IDE 追蹤工具多 &lt;br/> - 與 Percepio Tracealyzer 深度整合&lt;/td>
&lt;td>- 統一的 Tracing 子系統 &lt;br/> - 可連接 Tracealyzer、LTTng、SystemView 等 &lt;br/> - 追蹤支援度豐富&lt;/td>
&lt;td>- RT-Thread Studio 或其他插件 &lt;br/> - 提供簡單 log 系統與線上除錯機制 &lt;br/> - 社群亦有類似 FreeRTOS Trace 的追蹤方案&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>可移植性與擴充性&lt;/strong>&lt;/td>
&lt;td>- 官方主要支援多數 ARM、RISC-V、MIPS &lt;br/> - Microsoft 收購後社群逐漸擴大&lt;/td>
&lt;td>- 幾乎所有 MCU 都有移植 &lt;br/> - 大量第三方套件與驅動 &lt;br/> - 可透過 AWS FreeRTOS 延伸雲端功能&lt;/td>
&lt;td>- 原生支援多家大廠硬體 (Intel、NXP、Nordic&amp;hellip;) &lt;br/> - Kconfig + Devicetree 與 Linux 類似 &lt;br/> - 企業支援與社群並重&lt;/td>
&lt;td>- 在亞洲（特別是中國）用得廣泛 &lt;br/> - 與國產 MCU、RISC-V 平台整合度高 &lt;br/> - Packages 方式讓功能彈性擴充&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="總結">總結
&lt;/h2>&lt;p>總結一下前面提到的四種RTOS：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>AzureRTOS (ThreadX)&lt;/strong>：以高效能與小巧佔用聞名，擅長在嚴苛的資源受限環境中執行，另有良好的除錯工具與商業案例，對STM32的支援度好。&lt;/li>
&lt;li>&lt;strong>FreeRTOS&lt;/strong>：擁有巨大開源社群與靈活的擴充性，適用於廣泛的微控制器與嵌入式應用，在學術或商業專案皆常見，初學者適合。&lt;/li>
&lt;li>&lt;strong>Zephyr&lt;/strong>：受到 Linux 基金會與多家企業的大力推動，硬體支援廣泛，並有強大的追蹤與分析工具，適合需要高可靠度及詳細監控的中大型嵌入式應用&lt;/li>
&lt;li>&lt;strong>RT-Thread&lt;/strong>：架構輕量化、模組化明確，啟動速度快，適合物聯網及其他對即時性與資源效率要求高的場景。&lt;/li>
&lt;/ol></description></item></channel></rss>